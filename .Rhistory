classified <- mapply(Classify_function,
df_MA$Interaction_Effect_Size,
df_MA$Interaction_CI_Upper,
df_MA$Interaction_CI_Lower,
df_MA$Obs_effect,
df_MA$Exp_effect)
df_AA$ES_Dir    <- as.numeric(as.character(classified[1,]))
df_AA$CI_U_Dir  <- as.numeric(as.character(classified[2,]))
df_AA$CI_L_Dir  <- as.numeric(as.character(classified[3,]))
df_AA$Int_Class <- classified[4,]
if(assign_reversals == FALSE){
rev_to_ant <- function(int_class){
if(int_class == "Reversal"){
int_class = "Antagonistic"
}
return(int_class)
}
print(df_AA$Int_Class)
df_AA <<- df_AA
df_AA$Int_Class <- mapply(rev_to_ant(df_AA$Int_Class))
}
df_MA$Interaction_Classification <- df_AA$Int_Class
if(remove_directionality == TRUE){
df_MA$Interaction_Effect_Size <- df_AA$ES_Dir
df_MA$Interaction_CI_Upper <- df_AA$CI_U_Dir
df_MA$Interaction_CI_Lower <- df_AA$CI_L_Dir
}
drop_columns <- c("Obs_effect", "Exp_effect")
df_MA <- df_MA[ , !(names(df_MA) %in% drop_columns)]
#df_MA <- base::subset(df_MA, select = -c(Obs_effect))
#df_MA <- base::subset(df_MA, select = -c(Exp_effect))
return(df_MA)
}
classify_interactions(effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.5),
assign_reversals = FALSE,
remove_directionality = TRUE)
View(df_AA)
print(df_AA$Int_Class)
df_AA <<- df_AA
df_AA$Int_Class <- mapply(rev_to_ant(df_AA$Int_Class))
rev_to_ant <- function(int_class){
if(int_class == "Reversal"){
int_class = "Antagonistic"
}
return(int_class)
}
df_AA$Int_Class <- mapply(rev_to_ant(df_AA$Int_Class))
rev_to_ant(df_AA$Int_Class)
classify_interactions(effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[12],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[12],
Control_Mean      = multiplestressR::survival$Mean_Control[12],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[12],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[12],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[12],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[12],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[12],
StressorB_Mean    = multiplestressR::survival$Mean_pH[12],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[12],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[12],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[12],
Significance_Level = 0.5),
assign_reversals = FALSE,
remove_directionality = TRUE)
classify_interactions(effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1:2],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1:2],
Control_Mean      = multiplestressR::survival$Mean_Control[1:2],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1:2],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1:2],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1:2],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1:2],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1:2],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1:2],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1:2],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1:2],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1:2],
Significance_Level = 0.5),
assign_reversals = FALSE,
remove_directionality = TRUE)
View(df_AA)
classify_interactions <- function(effect_size_dataframe,
assign_reversals,
remove_directionality){
if(missing(assign_reversals) == TRUE){
assign_reversals <- TRUE
}
if(missing(remove_directionality) == TRUE){
remove_directionality <- FALSE
}
df_MA <- effect_size_dataframe
if(is.data.frame(df_MA) != TRUE){
stop("effect_size_dataframe is not a data.frame
Please specify effect_size_dataframe as the output from either effect_size_additive or effect_size_multiplicative")
}
check_col_names <- colnames(df_MA)
col_names_correct <-  c("Control_N",
"Control_SD",
"Control_Mean",
"StressorA_N",
"StressorA_SD",
"StressorA_Mean",
"StressorB_N",
"StressorB_SD",
"StressorB_Mean",
"StressorsAB_N",
"StressorsAB_SD",
"StressorsAB_Mean",
"Interaction_Effect_Size",
"Interaction_Variance",
"Interaction_CI_Upper",
"Interaction_CI_Lower",
"Null_Model")
if(FALSE %in% c(sort(check_col_names) == sort(col_names_correct)) == TRUE){
stop("Column names are different to those anticipated
Please specify effect_size_dataframe as the output from either effect_size_additive or effect_size_multiplicative")
}
### Ensure all N, SD, and Mean are numeric
booleans_numeric <- c(is.numeric(df_MA$Control_N) |        is.na(df_MA$Control_N),
is.numeric(df_MA$Control_SD) |       is.na(df_MA$Control_SD),
is.numeric(df_MA$Control_Mean) |     is.na(df_MA$Control_Mean),
is.numeric(df_MA$StressorA_N) |      is.na(df_MA$StressorA_N),
is.numeric(df_MA$StressorA_SD) |     is.na(df_MA$StressorA_SD),
is.numeric(df_MA$StressorA_Mean) |   is.na(df_MA$StressorA_Mean),
is.numeric(df_MA$StressorB_N) |      is.na(df_MA$StressorB_N),
is.numeric(df_MA$StressorB_SD) |     is.na(df_MA$StressorB_SD),
is.numeric(df_MA$StressorB_Mean) |   is.na(df_MA$StressorB_Mean),
is.numeric(df_MA$StressorsAB_N) |    is.na(df_MA$StressorsAB_N),
is.numeric(df_MA$StressorsAB_SD) |   is.na(df_MA$StressorsAB_SD),
is.numeric(df_MA$StressorsAB_Mean) | is.na(df_MA$StressorsAB_Mean))
if(FALSE %in% booleans_numeric == TRUE){
stop("Means, Sample sizes, and SDs are non-numeric
Please specify effect_size_dataframe as the output from either effect_size_additive or effect_size_multiplicative")
}
### Check whether N variables are all integers
integer_check <- c(df_MA$Control_N, df_MA$StressorA_N, df_MA$StressorB_N, df_MA$StressorsAB_N)
if(length(integer_check) != length(integer_check[integer_check %% 1 == 0])){
warning("It is expected that all sample sizes will be integer values.
Double check whether non-integer values for sample sizes are correct.")
}
### Ensure that the lengths of all variables are the same
lengths <- c(length(df_MA$Control_N),
length(df_MA$Control_SD),
length(df_MA$Control_Mean),
length(df_MA$StressorA_N),
length(df_MA$StressorA_SD),
length(df_MA$StressorA_Mean),
length(df_MA$StressorB_N),
length(df_MA$StressorB_SD),
length(df_MA$StressorB_Mean),
length(df_MA$StressorsAB_N),
length(df_MA$StressorsAB_SD),
length(df_MA$StressorsAB_Mean))
if(length(unique(lengths)) != 1){
stop("Variables are of differing lengths
Please specify effect_size_dataframe as the output from either effect_size_additive or effect_size_multiplicative")
}
###Ensure that null model is same across dataframe and that it is either additive or multiplicative
if(length(unique(df_MA$Null_Model)) != 1){
stop("There is more than one Null Model specified
Please specify effect_size_dataframe as the output from either effect_size_additive or effect_size_multiplicative")
}
if(unique(df_MA$Null_Model) %in% c("Additive", "Multiplicative") == FALSE){
stop("Null model should be either 'Additive' or 'Multiplicative'
Please specify effect_size_dataframe as the output from either effect_size_additive or effect_size_multiplicative")
}
if(assign_reversals %in% c(TRUE, FALSE) == FALSE){
stop("assign_reversals should be either TRUE or FALSE
Please specify assign_reversals as either TRUE or FALSE      default is TRUE")
}
if(remove_directionality %in% c(TRUE, FALSE) == FALSE){
stop("remove_directionality should be either TRUE or FALSE
Please specify remove_directionality as either TRUE or FALSE      default is FALSE")
}
###Check whether Means are greater than 0
if(unique(df_MA$Null_Model) == "Multiplicative"){
check_0 <- c(df_MA$Control_Mean, df_MA$StressorA_Mean, df_MA$StressorB_Mean, df_MA$StressorsAB_Mean)
if(length(check_0[check_0 > 0]) != length(check_0)){
stop("Please specify effect_size_dataframe as the output from either effect_size_additive or effect_size_multiplicative")
}}
Null_Model <- unique(df_MA$Null_Model)
df_MA$Exp_effect <- NA
df_MA$Obs_effect <- NA
if(Null_Model == "Additive"){
df_MA$Exp_effect <- df_MA$StressorA_Mean + df_MA$StressorB_Mean - df_MA$Control_Mean - df_MA$Control_Mean
df_MA$Obs_effect <- df_MA$StressorsAB_Mean - df_MA$Control_Mean
}
if(Null_Model == "Multiplicative"){
df_MA$Exp_effect <- log(df_MA$StressorA_Mean) + log(df_MA$StressorB_Mean) - log(df_MA$Control_Mean) - log(df_MA$Control_Mean)
df_MA$Obs_effect <- log(df_MA$StressorsAB_Mean) - log(df_MA$Control_Mean)
}
Classify_function <- function(es, CI_U, CI_L, Observed, Expected){
if(is.na(es) == T){
return(c(es, CI_U, CI_L, "Unable to Classify Interaction"))
}
if(is.na(CI_L) == T){
return(c(es, CI_U, CI_L, "Unable to Classify Interaction"))
}
if(is.na(CI_U) == T){
return(c(es, CI_U, CI_L, "Unable to Classify Interaction"))
}
CI <- CI_U - es
if(Expected < 0){
es <- -es
CI_L <- es - CI
CI_U <- es + CI
}
int.class <- NA
if(es > 0){
if(CI_U > 0 & CI_L > 0){
int.class <- "Synergistic"
}
}
if(es < 0){
if(CI_U < 0 & CI_L < 0){
if((Expected >= 0 & Observed < 0) | (Expected <= 0 & Observed > 0)){
int.class <- "Reversal"
}
}
if(CI_U < 0 & CI_L < 0){
if((Expected >= 0 & Observed >= 0) | (Expected <= 0 & Observed <= 0)){
int.class <- "Antagonistic"
}
}
}
if((CI_U <= 0 & CI_L >= 0) | (CI_U >= 0 & CI_L <= 0)){
int.class <- "Null"
}
to.return <- c(es, CI_U, CI_L, int.class)
if(is.na(int.class) == TRUE){
warning("Unable to classify an interaction")
}
return(to.return)
}
df_AA <- data.frame(Index = 1:dim(df_MA)[1])
df_AA$ES_Dir    <- NA
df_AA$CI_U_Dir  <- NA
df_AA$CI_L_Dir  <- NA
df_AA$Int_Class <- NA
classified <- mapply(Classify_function,
df_MA$Interaction_Effect_Size,
df_MA$Interaction_CI_Upper,
df_MA$Interaction_CI_Lower,
df_MA$Obs_effect,
df_MA$Exp_effect)
df_AA$ES_Dir    <- as.numeric(as.character(classified[1,]))
df_AA$CI_U_Dir  <- as.numeric(as.character(classified[2,]))
df_AA$CI_L_Dir  <- as.numeric(as.character(classified[3,]))
df_AA$Int_Class <- classified[4,]
if(assign_reversals == FALSE){
rev_to_ant <- function(int_class){
if(int_class == "Reversal"){
int_class = "Antagonistic"
}
return(int_class)
}
print(df_AA$Int_Class)
df_AA <<- df_AA
df_AA$Int_Class <- mapply(rev_to_ant, df_AA$Int_Class)
}
df_MA$Interaction_Classification <- df_AA$Int_Class
if(remove_directionality == TRUE){
df_MA$Interaction_Effect_Size <- df_AA$ES_Dir
df_MA$Interaction_CI_Upper <- df_AA$CI_U_Dir
df_MA$Interaction_CI_Lower <- df_AA$CI_L_Dir
}
drop_columns <- c("Obs_effect", "Exp_effect")
df_MA <- df_MA[ , !(names(df_MA) %in% drop_columns)]
#df_MA <- base::subset(df_MA, select = -c(Obs_effect))
#df_MA <- base::subset(df_MA, select = -c(Exp_effect))
return(df_MA)
}
classify_interactions(effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1:2],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1:2],
Control_Mean      = multiplestressR::survival$Mean_Control[1:2],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1:2],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1:2],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1:2],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1:2],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1:2],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1:2],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1:2],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1:2],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1:2],
Significance_Level = 0.5),
assign_reversals = FALSE,
remove_directionality = TRUE)
classify_interactions(effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[12],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[12],
Control_Mean      = multiplestressR::survival$Mean_Control[12],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[12],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[12],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[12],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[12],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[12],
StressorB_Mean    = multiplestressR::survival$Mean_pH[12],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[12],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[12],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[12],
Significance_Level = 0.5),
assign_reversals = FALSE,
remove_directionality = TRUE)
classify_interactions(effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.5),
assign_reversals = FALSE,
remove_directionality = TRUE)
classify_interactions(effect_size_multiplicative(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.01),
assign_reversals = TRUE,
remove_directionality = TRUE)$Interaction_Classification[1]
effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.005),
assign_reversals = FALSE,
remove_directionality = FALSE)$Interaction_Classification[1]
classify_interactions(effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.005),
assign_reversals = FALSE,
remove_directionality = FALSE)$Interaction_Classification[1]
build()
build()
check()
sprintf("%.100f",pi)
sprintf("%.10f",pi)
sprintf("%.10f",effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.05)$Interaction_Effect_Size[1])
sprintf("%.10f",effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.10)$Interaction_CI_Lower[1])
sprintf("%.10f",effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.075,
Small_Sample_Correction = FALSE)$Interaction_Effect_Size[1])
sprintf("%.10f",effect_size_additive(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.01,
Small_Sample_Correction = FALSE)$Interaction_CI_Upper[1])
sprintf("%.10f",effect_size_multiplicative(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.05)$Interaction_Effect_Size[1])
sprintf("%.10f",effect_size_multiplicative(Control_N         = multiplestressR::survival$Sample_Size_Control[1],
Control_SD        = multiplestressR::survival$Standard_Deviation_Control[1],
Control_Mean      = multiplestressR::survival$Mean_Control[1],
StressorA_N       = multiplestressR::survival$Sample_Size_Temperature[1],
StressorA_SD      = multiplestressR::survival$Standard_Deviation_Temperature[1],
StressorA_Mean    = multiplestressR::survival$Mean_Temperature[1],
StressorB_N       = multiplestressR::survival$Sample_Size_pH[1],
StressorB_SD      = multiplestressR::survival$Standard_Deviation_pH[1],
StressorB_Mean    = multiplestressR::survival$Mean_pH[1],
StressorsAB_N     = multiplestressR::survival$Sample_Size_Temperature_pH[1],
StressorsAB_SD    = multiplestressR::survival$Standard_Deviation_Temperature_pH[1],
StressorsAB_Mean  = multiplestressR::survival$Mean_Temperature_pH[1],
Significance_Level = 0.05)$Interaction_CI_Lower[1])
sprintf("%.10f",critical_effect_size_additive(Control_N     = 4,
StressorA_N   = 4,
StressorB_N   = 4,
StressorsAB_N = 4))
sprintf("%.10f",critical_effect_size_additive(Control_N     = 3,
StressorA_N   = 3,
StressorB_N   = 3,
StressorsAB_N = 3,
Small_Sample_Correction = FALSE,
Significance_Level = 0.10))
sprintf("%.10f",critical_effect_size_additive(Control_N     = 46,
StressorA_N   = 23,
StressorB_N   = 73,
StressorsAB_N = 4,
Small_Sample_Correction = TRUE,
Significance_Level = 0.50))
build()
check()
check()
check()
build()
check()
build_manual()
?multiplestressR::
library(multiplestressR)
?multiplestressR::summary_plots
build()
check()
build()
check()
version
?rhub::check()
install.packages("rhub")
library(rhub)
?rhub::check
rhub::check
rhub::check()
rhub::check()
library(devtools)
devtools::build()
devtools::test()
devtools::test_coverage()
devtools::run_examples()
devtools::check()
library(rhub)
rhub::check_for_cran()
results <- rhub::check_for_cran()
results$cran_summary()
results$cran_summary()
devtools::check_win_devel()
devtools::document()
devtools::spell_check()
devtools::check()
devtools::check()
devtools::release()
